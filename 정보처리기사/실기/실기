## 1.  요구사항 확인

- ### 01. 소프트웨어 개발 방법론
	- 소프트웨어 개발 방법론 종류
		- 구조적 방법론
		- 정보공학 방법론
		- 객체 지향 방법론
		- 컴포넌트 기반 방법론(CBD)
		- 애자일(Agile) 방법론 : 절차보다는 사람이 중심이 되어 변화에 유연하고 신속하게 적응하면서 효율적인 시스템 개발할 수 있는 신속 적응적 개량 개발 방법론 **[20-2]**
		- 제품 계열 방법론

	- 비용산정 모형 분류
		- 하양식 산정방법 : 경험이 많은 전문가에게 비용산정 의뢰 또는 전문가와 조정자를 통해 비용산정

		- 상향식 산정방법 : 세부적인 요구사항과 기능에 따라 필요한 비용산정
			- 코드 라인 수(LoC : Line of Code) **[20-1]**

- ### 02. 현행 시스템 분석
	- 디자인 패턴 : 소프트웨어 설계에서 공통으로 발생하는 문제에 대해 자주 쓰이는 설게 방법을 정리한 패턴

	- 디자인 패턴 유형
		- 목적 **[20-4]**
			- 생성 : 객체 인스턴스 생성에 관여, 클래스 정의와 객체 생성 방식을 구조화, 캡슐화를 수행하는 패턴
			- 구조 : 클래스나 객체의 조합을 다루는 패턴
			- 행위 : 클래스나 객체들이 상호 작용하는 방법과 역할 분담을 다루는 패턴
		- 범위
			- 클래스 : 상속 관계를 다루는 패턴, 컴파일 타임에 정적으로 결정
			- 객체 : 객체 간 관련성을 다루는 패턴, 런타임에 동적으로 결정

	- 디자인 패턴 종류
		- 생성 패턴 : 객체 인스턴스 생성에 관여, 클래스 정의와 객체 생성방식을 구조화, 캡슐화를 수행하는 패턴
			- Factory Method (클래스) **[21-3]**
				- 부모(상위) 클래스에 알려지지 않은 구체 클래스를 생성하는 패턴
				- 자식(하위) 클래스가 어떤 객체를 생성할지를 결정하도록 하는 패턴
				- 부모(상위) 클래스 코드에 구체 클래스 이름을 감추기 위한 방법으로도 사용
			- Builder
			- Prototype
			- Abstract Factory
			- Singleton
		- 구조 패턴 : 클래스나 객체의 조합을 다루는 패턴
			- Adapter (클래스)
			- Bridge
			- Decorator
			- Fly weight
			- Proxy
			- Composite
			- Facade
		- 행위 패턴 : 반복적으로 사용되는 객체들의 상호작용을 패턴화 한 것으로, 클래스나 객체들이 상호작용하는 방법 **[21-2]**
			- Template Method (클래스)
			- Interpreter (클래스)
			- Mediator
			- Iterator
			- Observer : 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들에게 연락이 가고 자동으로 내용이 갱신되는 방식으로, 일대다의 의존성을 정의하는 패턴 **[20-2]**
			- State
			- Visitor
			- Command
			- Strategy
			- Memento
			- Chain of Responsibility

- ### 03. 요구사항 확인
	- 요구사항의 분류 **[21-1]**
		- 기능적 요구사항 : 시스템이 제공하는 기능, 서비스에 대한 요구사항
		- 비기능적 요구사항 : 시스템이 수행하는 기능 이외의 사항, 시스템 구축에 대한 제약사항에 관한 요구사항

- ### 04. 분석 모델 확인하기

## 2.  화면 설계

- ### 01. UI 요구사항 확인
	- UI(User Interface) : 사용자 인터페이스. 사용자와 시스템 사이에서 의사소통 할 수 있도록 고안된 물리적, 가상의 매개체 **[21-2]**

	-   UX(User Experience) : 사람의 감정이나 경험을 나타내는 개념 **[21-2]**

	- UI 유형
		- CLI(Command Line Interface)
		- GUI(Graphical User Interface) : 그래픽 환경을 기반으로 한 마우스나 전자펜을 이용한 사용자 인터페이스
		- NUI(Natural User Interface)
		- OUI(Organic User Interface)

	- UI 설계 원칙
		- 직관성 : 누구나 쉽게 이해하고, 쉽게 사용할 수 있도록 제작 **[20-3]**
		- 유효성 : 정확하고 완벽하게 사용자의 목표가 달성될 수 있도록 제작 **[20-2]**
		- 학습성 : 초보와 숙련자 모두가 쉽게 배우고 사용할 수 있도록 제작
		- 유연성 : 사용자의 요구사항을 최대한 수용하고, 오류를 최소화할 수 있도록 제작

- ### 02. UI 설계
	- UML(Unified Modeling Language) : 객체 지향 소프트웨어 개발 과정에서 산출물을 명세화, 시각화, 문서화할 때 사용되는 모델링 기술과 방법론을 통합해서 만든 표준화된 범용 모델링 언어

	- UML 다이어그램
		- 구조적 다이어그램 / 정적 다이어그램
			- 클래스(Class) **[21-3]**
				- 클래스의 속성 및 연산과 클래스간 정적인 관계를 표현
				- 문제 해결을 위한 도메인 구조를 나타내어 보이지 않는 도메인 안의 개념과 같은 추상적인 개념을 기술하기 위해 나타낸 것
				- 클래스를 포함하여 속성(Attribute)과 메서드(Method)를 포함한 형식
			- 객체(Object)
			- 컴포넌트(Component)
			- 배치(Deployment)
			- 복합체 구조(Composite Structure)
			- 패키지(Package) : 유스케이스, 클래스 등의 모델 요소들을 그룹화한 패키지들의 관계 **[20-4]**

		-  행위적 다이어그램 / 동적 다이어그램
			- 유스케이스(Usecase)
			- 시퀀스(Sequence)
			- 커뮤니케이션(Communication)
			- 상태(State)
			- 활동(Activity)
			- 타이밍(Timing)

	- UML에서 제공하는 클래스 사이의 관계
		- 연관 관계(Association) : 클래스들이 개념상 서로 연결되어 있음을 표현
		- 일반화 관계(Generalization) **[21-3]**
			- 한 클래스가 다른 클래스를 포함하는 상위 개념일 때 IS-A 관계라 하며, 일반화 관계로 모델링
			- 상속 관계를 설명
		- 집합 관계
			- 집약 관계(Aggregation) : 클래스 사이의 전체 또는 부분 같은 관계를 표현 (객체 라이프 타임 : 독립적) **[21-3]**
			- 합성 관계(Composition) : 클래스 사이의 전체 또는 부분 같은 관계를 표현 (객체 라이프 타임 : 의존적)
			- 의존 관계(Dependency) : 연관 관계와 같이 한 클래스가 다른 클래스에서 제공하는 기능을 사용
			- 실체화 관계(Realization) : 인터페이스와 구현 클래스 사이의 관계를 표현

## 3.  데이터 입출력 구현

- ### 01. 논리 데이터 저장소 확인
	- 데이터 모델(Data Model) : 현실 세계의 정보를 인간과 컴퓨터가 이해할 수 있도록 추상화하여 표현한 모델

	- 데이터 모델 절차 **[20-2]**
		- 1. 요구사항 분석
		- 2. 개념적 설계 : 현실 세계에 대한 인식을 추상적, 개념적으로 표현하여 개념적 구조를 도출하는 과정. 주요 산출물에는 E-R 다이어그램이 있다. **[21-1]**
		- 3. 논리적 설계 : 목표 DBMS에 맞는 스키마 설계. 트랜잭션 인터페이스를 설계하는 정규화 과정을 수행 **[21-1]**
		- 4. 물리적 설계 : 특정 DBMS의 특성 및 성능을 고려하여 데이터베이스 저장 구조로 변환하는 과정. 결과로 나오는 명세서는 테이블 정의서 등이 있다. **[21-1]**
		- 5. 구현

	- 데이터 모델 구성요소 **[21-1]**
		- 구조(Structure)
			- 데이터베이스에 표현될 대상으로서의 개체 타입과 개체 타입들간의 관계
			- 데이터 구조 및 정적 성질
		- 연산(Operation)
			- 저장된 실제 데이터를 처리하는 방법
			- 데이터를 조작하는 기본 도구
		- 제약조건(Constraint) : 저장될 수 있는 데이터의 논리적인 제약조건

	- 표현 용어
		- 개체(Entity)
			- 행, 튜플
			- 카디날리티(Cardinality) : 개체의 수 **[21-1]**
		- 속성(Attribute)
			- 열, 필드
			- Degree : 속성의 수 **[21-1]**
		- 관계(Relation)

	- 이상현상(Anomaly) : 데이터의 중복성으로 인해 릴레이션을 조작할때 발생하는 비합리적 현상 **[20-4]**
		- 삽입이상
		- 삭제이상
		- 갱신이상

	- 정규화 단계
		- 제 1 정규형(1NF) :  도메인이 원자값으로 구성
		- 제 2 정규형(2NF) :  부분 함수 종속 제거 (완전 함수적 종속을 만족)
		- 제 3 정규형(3NF) : 이행 함수 종속 제거
		- 보이스-코드 정규형(BCNF) : 결정자이면서 후보키가 아닌 것 제거
		- 제 4 정규형(1NF) : 다치 종속(다중 값 종속) 제거
		- 제 5 정규형(1NF) : 조인 종속 제거

	- 반정규화, 비정규화, 역정규화(De-Nomalization) : 정규화된 모델을 통합, 중복, 분리하는 과정으로, 성능개선을 위하여 의도적으로 정규화 원칙을 위배하는 행위 **[20-1] [21-1]**

- ### 02. 물리 데이터 저장소 설계

- ### 03. 데이터베이스 기초 활용하기

## 4. 통합 구현

- ### 01. 연계 요구사항 분석

- ### 02. 연계 메커니즘 구성

- ### 03. 내·외부 연계 모듈 구현
	- EAI(Enterprise Application Intergration) **[21-1]**
		- 기업에서 운영되는 서로 다른 플랫폼 및 애플리케이션 간의 정보를 전달, 연계 통합이 가능하도록 해주는 솔루션
		- 미들웨어(Middleware)를 이용하여 비즈니스 로직(Business Logic)을 중심으로 기업 내 애플리케이션을 통합하는 비즈니스 통합 솔루션

	- EAI 구축 유형
		- Point to Point / Peer to Peer : 미들웨어를 두지 않고 애플리케이션과 직접 1:1로 연결하는 방식 **[20-3]**
		- Hub & Spoke : 애플리케이션 사이에 허브시스템을 두어 데이터를 중앙에서 전송하는 방식 **[20-3]**
		- Message Bus (ESB 방식)
		- Hybrid

	- 웹 서비스(Web Service) : 네트워크에 분산된 정보를 서비스 형태로 개방하여 표준화된 방식으로 공유하는 기술. 서비스 지향 아키텍처

	- 웹 서비스 유형
		- SOAP(Simple Object Access protocol) : HTTP, HTTPS, SMTP 등을 사용하여 XML 기반의 메시지를 네트워크 상태에서 교환하는 프로토콜 **[20-2]**
		- WSDL(Web Service Description Language) : 웹 서비스명, 제공 위치, 메세지 포맷, 프로토콜 정보 등 웹 서비스에 대한 상세 정보가 기술된 XML 형식으로 구성된 언어 **[21-1]**
		- UDDI(Universal Description, Discovery and Intergration)

	- IPC(Inter-Process Communication) : 공유메모리, 소켓, 세마포어, 메세지 큐 등 프로세스 간 통신하는 기술 **[21-1]**

## 5. 인터페이스 구현

- ### 02. 인터페이스 기능 구현
	- XML(eXtensible Markup Language) : 웹브라우저 간 HTML 문법이 호환되지 않는 문제와 SGML의 복잡성을 해결하기 위하여 개발된 다목적 마크업 언어 **[20-1]**

	- JSON(Javascript Object Notation) : 속성-값 쌍으로 이루어진 데이터 오브젝트를 전달하기 위해 인간이 읽을 수 있는 텍스트를 사용하는 개방형 표준 포맷이다. 비동기 처리에 사용되는 AJAX에서 XML을 대체하여 사용되고 있다. **[20-2]**

	- AJAX(Asynchronous Javascript And XML) : 자바스크립트를 사용하여 웹 서버와 클라이언트 간 비동기적으로 XML 데이터를 교환하고 조작하는 웹 기술, XMLHttpRequest 객체(비동기 통신을 담당하는 JS 객체)를 이용해서 필요한 일부 페이지의 데이터만 로드 **[20-2]**

- ### 03. 인터페이스 구현 검증

## 6. 프로그래밍 언어 활용
- 생성자(Construct) : 객체 생성 시 맴버 변수의 초기화를 위해 호출되는 메소드 **[20-3]**

- 변수 명명 규칙
	- 헝가리안 표기법(Hungarian Notation) : 데이터 타입의 정보를 이름 접두어로 지정하는 코딩 규칙 **[20-3]**
	- 카멜 케이싱(Camel Casing)
	- GNU Naming Convention
	- 상수(Constant)

## 7. SQL 응용

- ### 01. 데이터베이스 기본
	- 트랜잭션(Transaction) : 인가받지 않은 사용자로부터 데이터를 보장하기 위해 DBMS가 가져야 하는 특성, 하나의 논리적 기능을 정상적으로 수행하기 위한 작업의 기본 단위

	- 트랜잭션 특성
		- 원자성(Atomocity) : 트랜잭션의 연산 전체가 성공 또는 실패되어야 하는 성질 (All or Nothing) **[20-1] [21-2]**
		- 일관성(Consistency) : 트랜잭션 수행 전과 트랜잭션 수행 완료 후의 상태가 같아야 하는 성질
		- 격리성, 독립성, 고립성(Isolation) : 동시에 실행되는 트랜잭션들이 서로 영향을 미치지 않아야 한다는 성질 **[20-1]**
		- 영속성, 지속성(Durability) : 성공이 완료된 트랜잭션의 결과는 영속적으로 데이터베이스에 저장되어야 하는 성질

	- 트랜잭션 제어어(TCL, Transaction Control Language) : 트랜잭션의 결과를 허용하거나 취소하는 목적으로 사용되는 언어
		- TCL 명령어
			- COMMIT : 트랜잭션을 메모리에 영구적으로 저장
			- ROLLBACK : 트랜잭션 내역의 저장을 무효화 **[20-2]**
			- CHECKPOINT(SAVEPOINT) : ROLLBACK을 위한 시점을 지정

	- 데이터 정의어(DDL : Data Definition Language) : DB를 구축하거나 수정할 목적으로 사용하는 언어

	- DDL 대상
		- 도메인(Domain)
		- 스키마(Schema) : 데이터베이스의 구조, 제약 조건 등의 정보를 담고 있는 기본적인 구조 **[20-3]**
			- 외부 스키마, 개념 스키마, 내부 스키마

	- 데이터 제어어(DCL : Data Control Language) : 데이터의 보안, 무결성, 회복, 병행 제어 등을 정의하는데 사용하는 언어
		- DCL 유형
			- GRANT : 사용 권한 부여 **[21-3]**
			- REVOKE : 사용 권한 취소

	- 관계 대수 : 관계형 데이터베이스에서 원하는 정보와 그 정보를 검색하기 위해서 어떻게 유도하는가를 기술하는 절차적인 언어
	
	- 순수 관계 연산자
		- Select
		- Project
		- Join
		- Division : 릴레이션 A에서 릴레이션 B의 모든 조건을 만족하는 튜플을 제외한 후 프로젝션하는 연산자 **[20-3]**

	- 일반 집합 연산자
		- 합집합
		- 교집합
		- 차집합
		- 교차곱

	- 병행제어 : 다중 프로그램이 이점을 활용하여 동시에 여러 개의 트랜잭션을 병행수행할 때, 동시에 실행되는 트랜잭션들이 데이터베이스의 일관성을 파괴하지 않도록 트랜잭션 간의 상호작용을 제어하는 것

	- 병행제어기법
		- 로킹 : 접근한 데이터에 대해 연산을 모두 마칠때까지 상호배제하는 기법 **[21-2]**
		- 타임 스탬프 순서
		- 최적 병행 수행
		- 다중 버전 기법

	- 파일 구조(File Structures) : 파일을 구성하는 레코드들이 보조기억장치에 편성되는 방식. 접근 방식에 따라 방식이 달라진다.

	- 파일 구조 접근 방식 종류
		- 순차 접근
		- 인덱스 접근 : 레코드들을 키-값 순으로 정렬하여 기록하고, 레코드의 키 항목만을 모은 인덱스를 구성하여 편성하는 방식 **[21-3]**
		- 해싱 접근

- ### 02. 응용 SQL 작성하기

- ### 03. 절차형 SQL 활용하기

- ### 04. 데이터 조작 프로시저 최적화

- ### 기타
	- 데이터베이스 회복 : 데이터베이스를 갱신하는 도중에 시스템이 고장이 나도 데이터베이스의 일관성을 유지하는 DBMS 기능

	- 회복 기법
		- 지연 갱신(Deferred Update)
		- 즉시 갱신(Immediate Update) : 트랜잭션이 데이터를 변경하면 트랜잭션이 부분 완료되기 전이라도 즉시 실제 데이터베이스에 반영하는 기법 **[20-4]**
		- 그림자 페이지(Shadow Paging)
		- 검사점(Check Point)
		- 미디어 회복(Media Recovery)

## 8. 서버 프로그램 구현

- ### 01. 개발환경 구축
	- 형상 관리(Configuration Management) : 소프트웨어 개발을 위한 전체 과정에서 발생하는 모든 항목의 변경 사항을 관리하기 위한 활동
		- 형상 관리 절차
			- 1. 형상 식별 : 대상 정의
			- 2. 형상 통제 : 버전 관리. 변경 사항을 검토, 승인하여 현재 기준선에 반영할 수 있도록 통제하는 것 **[20-3]**
			- 3. 형상 감사 : 무결성
			- 4. 형상 기록 : 보고서

- ### 02. 공통 모듈 구현
	- 응집도(Cohesion) : 모듈의 독립성을 나타내는 정도로, 모듈 내부 구성요소 간 연관 정보
		- 우연적 : 모듈 내부의 각 구성 요소들이 연관이 없는 경우
		- 논리적 : 유사한 성격을 갖거나 특정 형태로 분류되는 처리 요소들이 한 모듈에서 처리되는 경우
		- 시간적 : 연관된 기능이라기보다는 특정 시간에 처리되어야 하는 활동들을 한 모듈에서 처리하는 경우
		- 절차적 **[21-2]**
			- 모듈이 다수의 관련 기능을 가질 때, 모듈 안의 구성 요소들이 그 기능을 순차적으로 수행하는 경우
			- 입출력 간 연관성은 없으나, 순서에 따라 수행 
		- 통신적(교환적) **[21-2]**
			- 동일한 입력과 출력 사용하여 다른 기능을 수행하는 활동들이 모여 있을 경우
		- 순차적 : 모듈 내에서 한 활동으로부터 나온 출력값을 다른 활동이 사용하는 경우
		- 기능적 **[21-2]**
			- 모듈 내부의 모든 기능이 단일한 목적을 위해 수행
			- 하나의 기능에 모두 기여하고 밀접하게 연관되어 있는 것

	- 결합도(Coupling) : 외부 모듈과의 연관도 또는 모듈 간의 상호의존성. 모듈간의 관련성을 측정하는 척도
		- 자료 : 모듈 간의 인터페이스로 전달되는 파라미터를 통해서만 모듈 상호 작용이 일어나는 경우
		- 스탬프 : 모듈 간의 인터페이스로 배열이나 객체, 구조 등이 전달되는 경우 **[21-1]**
		- 제어 : 단순 처리할 대상인 값만  전달하는 것이 아니라 어떻게 처리해야 한다는 제어요소가 전달되는 경우 **[21-3]**
		- 외부 
			- 모듈에서 외부로 선언한 데이터(변수)를 다른 모듈에서 참조할 때의 경우
			- 외부에서 도입된 데이터 포맷, 통신 프로토콜, 또는 디바이스 인터페이스를 공유할 때 주로 발생
		- 공통 : 파라미터가 아닌 모듈 밖에 선언된 전역 변수를 참조하고 전역 변수를 갱신하는 식으로 상호작용하는 경우 **[21-1]**
		- 내용 : 다른 모듈 내부에 있는 변수나 기능을 다른 모듈에서 사용하는 경우 **[21-1]**

	- 모듈의 독립성을 높이기 위해서는 결합도는 약하게, 응집도는 강하게 만들어야 한다. **[20-1]**

	- 팬인(Fan-In) 및 팬아웃(Fan-Out) **[20-1]**
		- Fan-In
		- Fan-Out
		- 시스템 복잡도를 최적화하기 위해 팬인은 높게, 팬아웃은 낮게 설계해야 한다.


- ### 04. 배치 프로그램 구현

## 9. 소프트웨어 개발 보안 구축

- ### 01. 소프트웨어 개발 보안 설계
	- SW 개발 보안 3대 요소
		- 기밀성(Confidentiality)
		- 무결성(Integrity)
		- 가용성(Availability) : 인가 받은 사용자는 시스템 내의 정보와 자원을 언제라도 사용할 수 있음 **[20-4]**

	- DoS(Denial of Service) 공격 : 시스템을 악의적으로 공격해서 해당 시스템의 자원을 부족하게 하여 원래 의도된 용도로 사용하지 못하게 하는 공격

	- DoS 공격의 종류
		- SYN 플러딩(SYN Flooding)
		- UDP 플러딩(UDP Flooding)
		- 스머프(Smurf) / 스머핑(Smurfing)
		- 죽음의 핑(Pod : Ping of Death)
		- 랜드 어택(Land Attack) : 출발지 IP와 목적지 IP를 같은 패킷 주소로 만들어 보내 시스템의 가용성을 침해하는 공격 **[20-1]**
		- 티어 드롭(Tear Drop)
		- 봉크(Bonk) / 보잉크(Boink)

	- 세션 하이재킹(Session Hijacking) **[21-1]**
		- TCP의 세션 관리 취약점을 이용한 공격 기법, 케빈 미트닉이 사용
		- '세션을 가로채다' 라는 의미로 정상적 연결을 RST 패킷을 통해 종료시킨 후 재연결 시 희생자가 아닌 공격자에게 연결

	- 네트워크 공격
		-  스니핑(Sniffing) : 공격 대상의 데이터만 몰래 들여다보는 수동적 공격 기법 **[20-4]**
		- 네트워크 스캐너, 스피너
		- 패스워드 크래킹
		- IP 스푸핑
		- ARP 스푸핑 **[21-4]**
			- 공격자가 특정 호스트의 MAC 주소를 자신의 MAC 주소로 위조한 ARP Reply를 만들어 희생자에게 지속적으로 전송
			- 근거리 통신망 하에서 ARP 메시지를 이용하여 상대방의 데이터 패킷을 중간에서 가로채는 중간자 공격 기법
		- ICMP Redirect 공격
		- 트로이 목마

	- 서버 접근 통제 유형
		- 임의적 접근 통제(DAC : Discretionary Access Control) : 신분(개인 또는 그룹의 식별자)에 근거하여 객체에 대한 접근을 제한하는 방법 **[21-4]**
		- 강제적 접근 통제(MAC : Mandatory Access Control) : 주체가 갖는 접근 허가 권한에 근거하여 객체에 대한 접근을 제한하는 방법
		- 역할 기반 접근 통제(RBAC : Role Based Access Control) : 중앙 관리자가 조직 내 맡은 역할에 기초하여 자원에 대한 접근을 제한하는 방법

	- 암호 알고리즘(Encryption Algorithm) : 데이터의 무결성 및 기밀성 확보를 위해 정보를 쉽게 해독할 수 없는 형태로 변환하는 기법
		- 양방향 방식 : 대칭 키 암호 방식, 비대칭 키 암호 방식
		- 일방향 해시함수 방식

	- 대칭키 암호화 알고리즘 : 동일한 키를 사용하여 암호화와 복호화
		- DES **[21-3]**
			- 미국 NBS(National Bureau of Standards, 현재 NIST)에서 국가 표준으로 정한 암호
			- 64비트 평문을 64비트 암호문으로 암호화
		- SEED
		- AES(Advanced Encryption Standard) **[21-2]**
			- 2001년 미국 표준 기술 연구소(NIST) 개발
			- DES의 취약점을 보완하기 위해 만들어진 고급 암호화 표준 방식
			- 128비트 평문을 128비트로 암호화
		- ARIA
		- IDEA
		- LFSR

	- 해시 암호화 알고리즘
		- MD5(Message-Digest Algorithm 5) : MD4 개선한 암호화 알고리즘, 파일의 무결성 검사에 사용 **[20-1]**
		- SHA-1
		- SHA-256/384/512
		- HAS-160
		- HAVAL

	- IPSec(Internet Protocol Security) : 무결성과 인증을 보장하는 인증 헤더(AH)와 기밀성을 보장하는 암호화(ESP)를 이용한 IP 보안 프로토콜 **[20-2]**

- ### 02. 소프트웨어 개발 보안 구현
	- 입력 데이터 검증 및 표현 : 입력 데이터로 인해 발생하는 문제들을 예방하기 위해 구현 단계에서 검증해야 하는 보안 점검 항목

	- 입력 데이터 검증 및 표현 취약점
		- XSS(Cross Site Script)
		- 사이트 간 요청 위조(CSRF : Cross-Stie Request Forgery)
		- SQL 삽입(Injection) : 악의적인 SQL 구문을 삽입, 실행시켜 데이터베이스의 접근을 통해 정보를 탈취하거나 조작 등의 행위를 하는 공격 **[20-2]**

	- 재해 복구 용어
		- DR(Diasater Recovery)
		- BR(Business Recovery)
		- RA(Risk Analysis)
		- BIA(Business Impact Analysis) : 재해 발생 시 영향을 미칠 수 있는 단순업무를 정의하고, 업무 주안 영향에 대한 정량적, 정성적 분석을 통해 복구 우선순위를 도출하는 과정

	- BIA 핵심 도출항목
		- RSO
		- RPO
		- RTO(Recovery Time Objective) : 시스템 복구까지 허용할 수 있는 최대 시간 **[20-2]**
		- RCO
		- BCO

	- ### 03. 기타
		- AAA(3A) : 유·무선 이동 및 인터넷 환경에서 가입자에게 대한 안전하고 신뢰성 있는 인증, 권한 검증 등의 기능을 체계적으로 제공하는 정보 보호 기술
			- Authentication **[21-3]**
				- 시스템을 접근하기 전에 접근 시도하는 사용자의 신원을 검증
				- 신분을 확인하는 인증
			- Authorization **[21-3]**
				- 검증된 사용자에게 어떤 수준의 권한과 서비스를 허용
				- 접근·허가를 결정하는 인가
			- Accounting **[21-3]**
				- 사용자의 자원(시간,정보,위치 등)에 대한 사용 정보를 수집
				- 리소스 사용정보를 수집·관리하는 계정

## 10. 애플리케이션 테스트 관리 

- ### 01. 애플리케이션 테스트 케이스 설계
	- 애플리케이션 테스트 : 애플리케이션에 잠재되어 있는 결함을 찾아내는 일련의 행위 또는 절차

	- 애플리케이션 테스트 원리
		- 완벽한 테스팅은 불가능
		- 파레토 법칙(Pareto Principle)
		- 살충제 패러독스(Presticide Paradox) : 동일한 테스트를 반복하면 더 이상 결함이 발견되지 않는 현상 **[20-1]**
		- 정황 의존성
		- 오류-부재의 궤변(Absence of Errors Fallacy)

	- 프로그램 실행 여부에 따른 분류
		- 정적 테스트 : 테스트 대상을 실행하지 않고 구조를 분석하여 논리성을 검증하는 테스트 (리뷰, 정적 분석)
		- 동적 테스트 : 소프트웨어를 실행하는 방식으로 테스트를 수행하여 결함을 검출하는 테스트 (화이트박스 테스트, 블랙박스 테스트, 경험기반 테스트)

	- 화이트박스 테스트(White-Box Test) : 원시 코드의 논리적인 모든 경로를 테스트하여 테스트 케이스를 설계하는 방법 (구조 검사)

	- 화이트박스 테스트 유형
		- 구문(문장) 커버리지 : 프로그램 내의 모든 명령문을 적어도 한 번 수행하는 커버리지 **[21-2]**
		- 결정(선택, 분기) 커버리지 : 결정 포인트 내의 **전체 조건식**이 적어도 한번은 참과 거짓의 결과가 되도록 수행하는 커버리지 **[20-3], [21-2]**
		- 조건 커버리지 : 결정 포인트 내의 **각 개별 조건식**이 적어도 한번은 참과 거짓의 결과가 되도록 수행하는 커버리지 **[21-2]**
		- 조건/결정 커버리지
		- 변경 조건/결정 커버리지
		- 다중 조건 커버리지
		- 기본 경로 커버리지
		- 제어 흐름 테스트
		- 데이터 흐름 테스트

	- 블랙박스 테스트(Black-Box Test) : 사용자의 요구사항 명세를 보면서 수행하는 테스트 (기능 검사). 내부 구조를 보이지 않는 테스트 

	- 블랙박스 테스트 유형
		- 동등(동치) 분할 테스트 : 입력 데이터의 영역을 유사한 도메인별로 유효값/무효값을 그룹핑하여 대표값 테스트 케이스를 도출하여 테스트 하는 기법 **[20-4] [21-1]**
		- 경곗값 분석 테스트 :  입력 조건의 경계값을 테스트 케이스로 선정하여 검사하는 기법 **[21-1]**
		- 결정 테이블 테스트
		- 상태 전이 테스트
		- 유스케이스 테스트
		- 분류 트리 테스트
		- 페어와이즈 테스트
		- 원인-결과 그래프 테스트 **[21-3]**
			- 요구사항 명세를 입력 조건과 출력 조건 간의 논리적 관계로 표현
			- '원인(causes)'은 입력 조건을 의미하고 '결과(effects)'는 입력 조건의 결과를 의미하며, 원인과 결과 간의 논리적 관계를 AND, OR, NOT 같은 boolean 연산자를 사용하여 표현
		- 비교 테스트

	- 테스트 오라클(Test Oracle) : 테스트 결과가 올바른지 판단하기 위해 사전에 정의된 참 값을 대입하여 비교하는 기법

	- 테스트 오라클 종류
		- 참 오라클 (True)
		- 샘플링 오라클 (Sampling) **[20-4]**
			- 특정한 몇 개의 입력값에 대해서만 기대하는 결과를 제공해 주는 오라클
			- 전수 테스트가 불가한 경우 사용하며 경계값, 구간별 예상값 결과 작성 사용
		- 휴리스틱 오라클 (Heuristic)
		- 일관성검사 오라클 (Consistent)

	- 테스트 레벨(Test Level) : 함께 편성되고 관리되는 테스트 활동의 그룹

	- 테스트 레벨 종류
		- 단위 테스트 **[21-1]**
			- 사용자 요구사항에 대한 단위 모듈, 서브루틴 등을 테스트하는 단계
			- 개별 모듈, 서브루틴이 정상적으로 실행되는지 확인
		- 통합 테스트 **[21-1]**
			- 단위 테스트가 완료된 모듈들을 결합하여 하나의 시스템으로 완성하는 과정에서의 테스트
			- 인터페이스 간 시스템이 정상적으로 실행되는지 확인
		- 시스템 테스트
		- 인수 테스트
		- 알파 테스트

- ### 02. 애플리케이션 통합 테스트
	- 통합 테스트(Intergration Test) : 단위 테스트가 완료된 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정에서의 테스트

	- 통합 테스트 수행 방법
		- 빅뱅 테스트
		- 상향식 테스트 : 최하위 모듈부터 점진적으로 상위 모듈과 함께 테스트 **[21-3]**
			- 테스트 드라이버 필요
		- 하향식 테스트 : 최상위 모듈부터 하위 모듈들을 통합하면서 테스트
			- 테스트 스텁 필요
		- 샌드위치 테스트

	- 테스트 자동화 도구 : 반복적인 테스트 작업을 스크립트 형태로 구현함으로써, 테스트 시간 단축과 인력 투입 비용을 최소화하는 한편, 쉽고 효율적인 테스트를 수행할 수 있는 방법

	- 테스트 자동화 도구 유형
		- 정적 분석 도구(Static Analysis Tools) : 만들어진 애플리케이션을 실행하지 않고 분석하는 도구 **[20-2]**
		- 테스트  실행 도구(Test Execution Tools)
		- 성능 테스트 도구(Performance Test Tools)

	- 테스트 하네스 구성요소
		- 테스트 드라이버 : 상향식 테스트 시, 상위 모듈 역할을 대신
		- 테스트 스텁 : 하양식 테스트 시, 하위 모듈 역할을 대신 **[21-2]**
		- 테스트 슈트
		- 테스트 케이스
		- 테스트 시나리오
		- 테스트 스크립트
		- 목 오브젝트

- ### 03. 애플리케이션 성능 개선
	- 애플리케이션 성능 측정 지표
		- 처리량(Throughput) : 일정 시간 내에 애플리케이션이 처리하는 일의 양 **[20-1]**
		- 응답 시간(Response Time) : 애플리케이션에 요청을 전달한 시간부터 응답이 도착할 때까지 걸린 시간 **[20-1]**
		- 경과(반환) 시간(Turnaround Time) : 애플리케이션에 작업을 의뢰한 시간부터 처리가 완료될 때까지 걸린 시간 **[20-1]**
		- 자원 활용률

	- 리팩토링(Refactoring) : 기능을 변경하지 않고 코드를 보완하여 가독성을 높이고 유지보수를 쉽게 하는 기법

## 11. 응용 SW 기초 기술 활용

- ### 01. 운영체제의 특징
	- 운영체제(OS : Operating System) : 사용자가 컴퓨터의 하드웨어를 쉽게 사용할 수 있도록 인터페이스를 제공해주는 소프트웨어

	- 운영체제 종류
		- 윈도우(Windows)
		- 유닉스(Unix) **[20-4]**
			- 거의 C언어로 구현되어 있으며 구조적인 파일 시스템을 가지고, 시스템의 파일이 하나의 트리구조
			- 미국 벨 연구소 켄 톰슨과 데니스 리치가 1960년대에 만든 운영체제
		- 리눅스(Linux)
		- 맥(Mac)
		- 안드로이드(Android) : Linux 운영체제 위에서 구동하며 ... 리눅스 모바일 운영체제 **[20-2]**

	- 프로세스 상태
		- 생성(Create) 상태
		- 준비(Ready) 상태
		- 실행(Running) 상태
		- 대기(Waiting) 상태
		- 완료(Complete) 상태

	- 프로세스 상태도 **[20-4]**
		- (그림 생략..)

	- 프로세스 스케줄링의 유형
		- 선점형 스케줄링 : 우선순위가 높은 프로세스가 CPU를 점유하는 스케줄링
			- 라운드 로빈(Round Robbin)
			- SRT(Shortest Remaining Time First)
			- 다단계 큐(Multi Level Queue)
			- 다단계 피드백 큐(Multi Level Feedback Queue)

		- 비선점형 스케줄링 : 한 프로세스가 CPU를 할당 받으면 작업 종료 전까지 다른 프로세스는 CPU 점유 불가능한 스케줄링
		- 우선순위(Priority)
		- 기한부(Deadline)
		- FCFS(Shortest Job First Service)
		- SJF(Shortest Job First)
		- HRN(Highest Response Ratio Next) : 대기 중인 프로세스 중 현재 응답률이 가장 높은 것을 선택, 기아현상 최소화 기법, 우선순위 = (대기시간 + 서비스 시간) / 서비스 시간 **[20-1]**

- ### 02. 네트워크 계층 구조 파악
	- OSI(Open System Interconnection) 7계층
		- 응용 계층(Application Layer) : 사용자와 네트워크 간 응용 서비스 연결, 데이터 생성
		- 표현 계층(Presentation Layer) **[21-3]**
			- 데이터 형식 설정, 부호 교환, 암/복호화
			- 수신자에서 데이터의 압축을 풀 수 있는 방식으로 된 데이터 압축
		- 세션 계층(Session Layer) : 응용 프로세스 간 연결 접속 및 동기 제어
		- 전송 계층(Transport Layer) : 프로세스 간 논리적 통신 서비스 제공
		- 네트워크 계층(Network Layer) : 단말기 간 데이터 전송을 위한 최적화된 경로 제공 **[21-3]**
		- 데이터링크 계층(Data Link Layer) **[21-3]**
			- 인접 시스템 간 데이터 전송, 전송 오류 제어 
			- 물리계층을 통해 송수신되는 정보의 오류와 흐름을 관리하여 안전한 정보의 전달을 수행할 수 있도록 도와주는 역할
		- 물리 계층(Physical Layer) : 0과 1의 비트 정보를 회선에 내보내기 위한 전기적 신호 변환 **[20-1]**

	- 프로토콜(Protocol)
		- 서로 다른 시스템이나 기기들 간의 데이터 교환을 원활히 하기 위한 표준화된 통신규약
		- 외교 분야에서의 의례 또는 의정서를 의미하는 용어로서 컴퓨터가 메시지를 전달하고, 메시지가 제대로 도착했는지 확인하며, 도착하지 않았을 경우 메시지를 재전송하는 일련의 방법. 기술적 은어라는 뜻 **[20-3]**

	- 프로토콜 기본 3요소 **[20-1]**
		- 구문(Syntax) : 시스템 간의 정보 전송을 위한 데이터 형식, 코딩, 신호 레벨 등의 규정
		- 시간(Timing) : 시스템 간의 정보 전송을 위한 속도 조절과 순서 관리 규정
		- 의미(Semantic) : 시스템 간의 정보 전송을 위한 제어 정보로 조정과 에러 처리를 위한 규정

	- 네트워크 계층 프로토콜
		- IP(Internet Protocol)
		- ARP(Adress Resolution Protocol)
			- IP 네트워크 상에서 IP 주소를 MAC(물리 네트워크) 주소로 변환하는 프로토콜
			- **IP -> MAC**
		- RARP(Reverse Address Resolution Protocol) **[21-1]**
			- 서버로부터 IP 주소를 요청하기 위해 사용하는 프로토콜
			- 물리 네트워크(MAC) 주소에 해당하는 IP 주소를 알려주는 프로토콜. 역순 주소 결정 프로토콜
			- **MAC -> IP**
		- ICMP(Interenet Control Message Protocol) : TCP/IP에서 IP 패킷을 처리할 때 발생되는 문제를 알려주는 프로토콜 **[20-3]**
		- IGMP(Internet Group Management Protocol)
		- 라우팅 프로토콜(Routing Protocol) : 데이터 전송을 위해 최적의 경로를 설정해주는 라우터 간의 상호 통신 프로토콜

	- IPv4(Internet Protocol version 4) : 인터넷에서 사용되는 패킷 교환 네트워크상에서 데이터를 교환하기 위한 32비트 주소체계를 갖는 네트워크 계층 프로토콜
		- 8비트씩 4부분으로 나뉜 10진수 **[21-1]**

	- IPv6(Internet Protocol version 6) : IPv6의 주소 부족 문제를 해결하기 위해 개발 **[20-4]**
		- 128비트 주소체계 **[21-1]**
		- 16비트씩 :(콜론)으로 8개 부분으로 구분

	- 라우팅 프로토콜
		- 내부 라우팅 프로토콜(IGP)
			- RIP(Routing Information Protocol) : AS(자율시스템)내에서 사용하는 거리 벡터 알고리즘에 기초하여 개발된 내부 라우팅 프로토콜
			- OSPF(Open Shortest Path First) : 자신을 기준으로 링크 상태 알고리즘(SPF, 다익스트라)을 적용하여 최단 경로를 찾는 라우팅 프로토콜 **[20-3]**
	
		- 외부 라우팅 프로토콜(EGP)
			- BGP(Border Gateway Protocol)

	- 패킷 교환 방식(Packet Switching) : 작은 블록의 패킷으로 데이터를 전송하여 데이터를 전송하는 동안만 네트워크 자원을 사용하도록 하는 통신 방식

	- 패킷 교환 방식 종류 **[21-2]**
		- 가상 회선 방식 : 목적지 호스트와 미리 연결한 후, 통신하는 연결형 교환 방식
		- 데이터그램 방식 : 헤더에 붙어서 개별적으로 전달하는 비연결형 교환 방식

	- 애드 혹 네트워크(Ad-hoc Network) **[21-2]**
		- 네트워크 장치를 필요로하지 않고 네트워크 토폴로지가 동적으로 변화되는 특징이 있으며 응용 분야로는 긴급 구조, 긴급 회의, 전쟁터에서의 군사 네트워크에 활용되는 네트워크
		- 노드들에 의해  자율적으로 구성되는 기반 구조가 없는 네트워크

- ### 03. 개본 개발환경 구축하기

## 12. 제품 소프트웨어 패키징

- ### 01. 제품 소프트웨어 패키징 하기
	- 릴리즈 노트(Release Note) : 고객에게 개발 과정에서 정리된 제품의 릴리즈 정보를 제공하는 문서
		- 릴리즈 노트 작성 항목
			- 머릿말/해더(Header) : 릴리즈 노트 이름, 제품 이름, 버전번호, 릴리즈 일자, 노트 버전 등 **[20-1]**
			- 개요
			- 목적
			- ...

- ### 02. 제품 소프트웨어 매뉴얼 작성 및 버전 등록

## 13. 기타

- 데이터 마이닝(Data Mining) : 데이터 웨어하우스에 저장된 데이터 집합에서 사용자의 요구에 따라 유용하고 가능성 있는 정보를 발견하기 위한 방법 **[20-1]**

- LOD(Linked Open Data) : 전 세계 오픈된 정보를 하나로 묶는 방식. link data와 open data의 합성어 **[20-2]**

- NAT(Network Access Translation) : 외부 네트워크에 알려진 것과 다른 IP 주소를 사용하는 내부 네트워크에서 IP 주소를 변환하는 기술 **[20-4]**

- 블록체인 : 거래정보를 기록한 원장을 특정 기관의 중앙 서버가 아닌 P2P 네트워크에 분산하여 참가자가 공동으로 기록하고 관리하는 기술 **[20-4]**

- 하둡(Hadoop) : 데이터 처리와 저장소 역할을 하는 여러 컴퓨터에 대용량 데이터를 분산 저장 및 분산 처리하는 오픈소스소프트웨어(OSS)로 구성된 빅데이터 플랫폼 **[20-4]**

- 객체지향 분석 기법
	- 럼바우 : 소프트웨어 구성 요소를 그래픽 표기법을 이용하여 모델링하는 분석 기법

- 럼바우 객체지향 분석 기법의 절차
	- 1. 객체 모델링(Object Modeling) : 객채들 간의 관계를 정의 - 예) ER다이어그램(ERD) **[21-2]**
	- 2. 동적 모델링(Dynamic Modeling) : 시간에 따라 변하는 것 - 예) 상태 다이어그램(상태도) **[21-2]**
	- 3. 기능 모델링(Functional Modeling) : 입력값이 출력값일 때 - 예) 자료 흐름도(DFD) **[21-2]**
